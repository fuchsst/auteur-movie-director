#!/usr/bin/env node
/**
 * Generate TypeScript types from backend OpenAPI schema
 * 
 * Usage: npm run generate:types
 */

import { generateApi } from 'swagger-typescript-api';
import * as path from 'path';
import * as fs from 'fs/promises';

const BACKEND_URL = process.env.BACKEND_URL || 'http://localhost:8000';
const OUTPUT_DIR = path.resolve(__dirname, '../src/lib/api/functionRunner/generated');

async function generateTypes() {
  console.log('üîÑ Generating Function Runner types from OpenAPI...');
  
  try {
    // Ensure output directory exists
    await fs.mkdir(OUTPUT_DIR, { recursive: true });
    
    // Fetch OpenAPI schema
    const response = await fetch(`${BACKEND_URL}/openapi.json`);
    if (!response.ok) {
      throw new Error(`Failed to fetch OpenAPI schema: ${response.statusText}`);
    }
    
    const schema = await response.json();
    
    // Filter schema to only include function runner endpoints
    const filteredSchema = {
      ...schema,
      paths: Object.fromEntries(
        Object.entries(schema.paths || {}).filter(([path]) => 
          path.includes('/functions/') || 
          path.includes('/templates/') ||
          path.includes('/tasks/') ||
          path.includes('/batches/') ||
          path.includes('/resources/')
        )
      )
    };
    
    // Generate TypeScript types
    await generateApi({
      name: 'types.ts',
      output: OUTPUT_DIR,
      input: filteredSchema,
      httpClientType: 'fetch',
      generateClient: false,
      generateRouteTypes: true,
      generateResponses: true,
      extractRequestParams: true,
      extractRequestBody: true,
      extractEnums: true,
      singleHttpClient: false,
      prettier: {
        printWidth: 100,
        singleQuote: true,
        trailingComma: 'es5',
        parser: 'typescript'
      },
      hooks: {
        onFormatTypeName: (typeName) => {
          // Ensure consistent naming
          if (typeName.endsWith('Response')) {
            return typeName;
          }
          if (typeName.endsWith('Request')) {
            return typeName;
          }
          return typeName;
        }
      }
    });
    
    // Post-process generated file
    const generatedPath = path.join(OUTPUT_DIR, 'types.ts');
    let content = await fs.readFile(generatedPath, 'utf-8');
    
    // Add header comment
    content = `/**
 * Auto-generated TypeScript types from OpenAPI schema
 * Generated on: ${new Date().toISOString()}
 * Backend URL: ${BACKEND_URL}
 * 
 * DO NOT EDIT THIS FILE MANUALLY
 * Run 'npm run generate:types' to regenerate
 */

${content}`;
    
    await fs.writeFile(generatedPath, content);
    
    // Create index file for easier imports
    const indexContent = `/**
 * Generated types re-export
 */

export * from './types';
`;
    
    await fs.writeFile(path.join(OUTPUT_DIR, 'index.ts'), indexContent);
    
    console.log('‚úÖ Types generated successfully!');
    console.log(`üìÅ Output: ${OUTPUT_DIR}`);
    
  } catch (error) {
    console.error('‚ùå Failed to generate types:', error);
    process.exit(1);
  }
}

// Run if called directly
if (require.main === module) {
  generateTypes();
}

export { generateTypes };