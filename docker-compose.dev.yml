# Development Docker Compose configuration
# Combines core services with proper volume mounts for local development
version: '3.8'

services:
  # Frontend - SvelteKit application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: amd-frontend
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      # Mount source code for hot reloading
      - ./frontend:/app
      - /app/node_modules
      # Mount workspace for file access
      - ./workspace:/workspace:rw
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://backend:8000
      - VITE_WS_URL=ws://backend:8000/ws
      - PUBLIC_APP_NAME=Auteur Movie Director
      - PUBLIC_APP_VERSION=1.0.0
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - amd-network

  # Backend - FastAPI application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: amd-backend
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      # Mount source code for hot reloading
      - ./backend:/app
      # Mount workspace for project storage
      - ./workspace:/workspace:rw
      # Mount models directory if using local models
      - ${MODELS_PATH:-./models}:/models:ro
    environment:
      - PYTHONPATH=/app
      - BACKEND_HOST=0.0.0.0
      - BACKEND_PORT=8000
      - WORKSPACE_ROOT=/workspace
      - MODELS_ROOT=/models
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - DEBUG=${DEBUG:-true}
      - PYTHONUNBUFFERED=1
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - amd-network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Redis - Message broker and cache
  redis:
    image: redis:7-alpine
    container_name: amd-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - amd-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Celery Worker (uncomment if needed)
  # worker:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #     target: development
  #   container_name: amd-worker
  #   volumes:
  #     - ./backend:/app
  #     - ./workspace:/workspace:rw
  #     - ${MODELS_PATH:-./models}:/models:ro
  #   environment:
  #     - PYTHONPATH=/app
  #     - CELERY_BROKER_URL=redis://redis:6379/0
  #     - CELERY_RESULT_BACKEND=redis://redis:6379/0
  #     - WORKSPACE_ROOT=/workspace
  #     - MODELS_ROOT=/models
  #     - LOG_LEVEL=${LOG_LEVEL:-INFO}
  #   depends_on:
  #     - redis
  #     - backend
  #   restart: unless-stopped
  #   networks:
  #     - amd-network
  #   command: celery -A app.worker worker --loglevel=info

networks:
  amd-network:
    name: ${DOCKER_NETWORK:-amd-network}
    driver: bridge

volumes:
  redis-data: