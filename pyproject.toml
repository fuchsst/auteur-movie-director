[build-system]
requires = ["setuptools>=68", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "blender-movie-director"
version = "0.1.0"
description = "AI-powered generative film studio integrated into Blender"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Stefan Fuchs", email = "admin@stefanfuchs.net"},
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: End Users/Desktop",
    "Topic :: Multimedia :: Graphics :: 3D Modeling",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "aiohttp>=3.12.13",
    "pyyaml>=6.0.2",
    "numpy<2.0",  # Blender compatibility
]

[project.optional-dependencies]
ai = [
    "crewai>=0.134.0",
    "litellm>=1.72.0",  # Match crewai's requirement
    "gradio-client>=1.10.4",
    # "comfyui-api-client>=0.1.0",  # Uncomment when available
]
dev = [
    "black>=25.1.0",
    "ruff>=0.12.1",
    "mypy>=1.16.1",
    "ipython>=9.3.0",
    "python-dotenv>=1.0.0",
    "types-aiofiles",
    "types-pyyaml",
    # Blender Python SDK - only available on certain platforms
    "bpy>=4.0.0;platform_system=='Linux' and python_version<'3.12'",
]
test = [
    "pytest>=8.4.1",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "pytest-xdist>=3.5.0",
    "pytest-html>=4.1.0",
    "pytest-json-report>=1.5.0",
    "faker>=20.0.0",
    "responses>=0.24.0",
    "aioresponses>=0.7.0",
    "coverage[toml]>=7.3.0",
]
blender = [
    # Minimal dependencies for Blender runtime
    "gradio-client>=1.10.4",
    # Note: bpy is only available on certain platforms and Python versions
    # It will be installed if available, but is not required
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=2.0.0",
    "myst-parser>=2.0.0",
]
all = [
    "blender-movie-director[ai,dev,test]",
]

[project.urls]
"Homepage" = "https://github.com/yourusername/blender-movie-director"
"Bug Tracker" = "https://github.com/yourusername/blender-movie-director/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["blender_movie_director*"]
exclude = ["tests*", "docs*"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 100
cache-dir = ".cache/ruff"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "E402",  # module import not at top of file (needed for Blender)
    "E722",  # bare except (sometimes needed for robustness)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # imported but unused
"tests/*" = ["E402"]  # module import not at top

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
cache_dir = ".cache/mypy"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--cov=blender_movie_director",
    "--cov-report=term-missing",
    "--cov-report=html:.cache/coverage_html",
    "--cov-report=xml:.cache/coverage.xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
asyncio_mode = "auto"
cache_dir = ".cache/pytest"

[tool.coverage.run]
source = ["blender_movie_director"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/venv/*",
]
data_file = ".cache/.coverage"

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]

[tool.coverage.html]
directory = ".cache/coverage_html"

[tool.coverage.xml]
output = ".cache/coverage.xml"